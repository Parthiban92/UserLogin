{"version":3,"sources":["EmployeeList.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeList","props","handleSubmit","e","preventDefault","state","login_name","username","login_password","password","localStorage","setItem","user","event","this","setState","target","name","value","className","map","user_list","age","gender","email","phoneNo","React","Component","App","invalid_display","isLoggedIn","validiatin_display","logout","removeItem","validationerror","empty_validation","bind","FormData","getItem","style","textAlignVertical","textAlign","display","type","onChange","placeholder","required","onClick","connect","reducer","dispatch","SetName","payload","Boolean","window","location","hostname","match","intialState","loggedin","store","createStore","action","subscribe","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d72e7c75.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  Link\r\n} from \"react-router-dom\";\r\nexport default class EmployeeList extends React.Component {\r\n   constructor(props) {\r\n    super(props);\r\n    this.state = {  user:[{       \"id\":1,       \"name\":\"test1\",       \"age\" : \"11\",       \"gender\":\"male\",       \"email\" : \"test1@gmail.com\",       \"phoneNo\" : \"9415346313\"     },     {       \"id\" : 2,       \"name\":\"test2\",       \"age\" : \"12\",       \"gender\":\"male\",       \"email\" : \"test2@gmail.com\",       \"phoneNo\" : \"9415346314\"     },     {       \"id\":3,       \"name\":\"test3\",\r\n       \"age\" : \"13\",       \"gender\":\"male\",       \"email\" : \"test3@gmail.com\",       \"phoneNo\" : \"9415346315\"     },     {       \"id\":4,       \"name\":\"test4\",       \"age\" : \"14\",       \"gender\":\"male\",       \"email\" : \"test4@gmail.com\",       \"phoneNo\" : \"9415346316\"     },     {       \"id\":5,       \"name\":\"test5\",       \"age\" : \"15\",       \"gender\":\"male\",       \"email\" : \"test5@gmail.com\",       \"phoneNo\" : \"9415346317\"     },     {       \"id\":6,       \"name\":\"test6\",       \"age\" : \"16\",       \"gender\":\"male\",       \"email\" : \"test6@gmail.com\",       \"phoneNo\" : \"9415346318\"     }]};\r\n     \r\n\r\n\r\n  \r\n  }\r\n  componentWillMount() {  \r\n\r\n     \r\n    }\r\n\r\n  FormData(event) {\r\n\r\n     this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n  if(this.state.login_name === this.state.username && this.state.login_password === this.state.password)\r\n  {\r\n     localStorage.setItem('auth',\"valid\")\r\n  }\r\n        \r\n }\r\n\r\n\r\n \r\n\r\n  render() {\r\n\r\n    return (\r\n       \r\n     \r\n\r\n     <table className=\"table table-hover\">\r\n            <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Age</th>\r\n                    <th>Gender</th>\r\n                    <th>Email</th>\r\n                    <th>Phone Number</th>\r\n                  </tr>\r\n            </thead>\r\n            <tbody>\r\n        \r\n             {   this.state.user.map((user_list)=>{\r\n              \r\n                    return(<tr> <td> {user_list.name}</td>\r\n                                <td> {user_list.age}</td>\r\n                                <td> {user_list.gender}</td>\r\n                                <td> {user_list.email}</td>\r\n                                <td> {user_list.phoneNo}</td>\r\n                             </tr>\r\n                          );\r\n          })\r\n        }\r\n           </tbody>\r\n      </table>\r\n   \r\n  \r\n    );\r\n  }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\n\nimport EmployeeList from './EmployeeList';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link\n} from \"react-router-dom\";\nimport {createStore} from 'redux';\nimport {connect} from 'react-redux';\n\n\nclass App extends Component {\n  constructor(){\n    \n         super();\n          this.state = {validiatin_display:false,\n                        invalid_display:false,\n                       isLoggedIn: true,username:\"hruday@gmail.com\",\n                       password :'hruday123',validationerror:'Invalid Username or Password',\n                       empty_validation:'Please Enter UserName and Password',\n                       login_name:'',login_password:''};\n          this.handleSubmit = this.handleSubmit.bind(this);\n          this.FormData = this.FormData.bind(this);\n          this.logout = this.logout.bind(this);\n         \n      }\n\n       componentWillMount() {  \n\n          if( localStorage.getItem('auth') !== null)\n            { \n                this.setState({isLoggedIn: false});\n               \n            }\n      }\n\n    \n     \n     FormData(event) {\n         \n        this.setState({ [event.target.name]: event.target.value });\n      }\n\n     handleSubmit = (e) => {\n        e.preventDefault();\n       \n         if(this.state.login_name == '' || this.state.password == '')\n          {\n            this.setState({invalid_display: true});\n           \n            return false;\n          }\n         \n         if(this.state.login_name === this.state.username && this.state.login_password === this.state.password)\n          {\n             localStorage.setItem('auth','valid') \n            this.setState({isLoggedIn: !this.state.isLoggedIn});\n          }else{\n            this.setState({validiatin_display: true});\n          } \n\n    }\n\n    logout =(e)=>{\n         if( this.state.isLoggedIn == false)\n            { \n                localStorage.removeItem('auth') \n              this.setState({isLoggedIn: true});\n            }\n              \n\n    }\n\n\n \n  render() {\n  \n    if (this.state.isLoggedIn) {   \n     return ( \n      <Router>\n      <div>\n          <form className=\"form-signin\">       \n             <h2 className=\"form-signin-heading\"  style={{textAlignVertical: \"center\",textAlign: \"center\",}}> Login</h2>\n                 <div className=\"form-group\">\n                     <div style={{display: this.state.validiatin_display ? 'block' : 'none' }} className='error_validation'> { this.state.validationerror } </div>\n                  </div>\n                  <div className=\"form-group\">\n                      <input type=\"text\" className=\"form-control\" onChange={ this.FormData } name=\"login_name\" placeholder=\"Email Address\" required=\"\" />\n                  </div>\n                   \n                  <div className=\"form-group\">\n                      <input type=\"password\" className=\"form-control\" onChange={ this.FormData } name=\"login_password\" placeholder=\"Password\" required=\"\"/>      \n                  </div>\n                   <div className=\"form-group\">\n                     <div  style={{display: this.state.invalid_display ? 'block' : 'none' }} className='error_validation'> { this.state.empty_validation } </div>\n                  </div>\n                  \n                  <div className=\"form-group\"> \n                      <button onClick={this.handleSubmit} className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign In</button>   \n                  </div>               \n           </form>\n      \n        </div>\n    </Router>); \n   \n   }else{\n    return (\n           <Router>\n               <Switch>\n                    <div className=\"container\">\n                             <div className=\"page-header table_content\">\n                                  <h1>Employee List</h1> \n                                      <button onClick={this.logout}  className='btn btn-success btn_logout'> Logout </button>      \n                             </div>\n                                <EmployeeList />\n                    </div>\n                </Switch>\n      </Router>\n    );\n  }\n  }\n}\n\n\nconst mapStateToProps = (state) =>{\n  return {\n      isLoggedIn:state.reducer      \n  }\n}\n\nconst mapDispatchToPrpos =(dispatch)=>{\n  return{\n     SetName:(isLoggedIn)=>{\n      dispatch({ type:'login',payload:isLoggedIn})\n    }\n  }\n   \n}\n   \nexport default connect(mapStateToProps,mapDispatchToPrpos)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\n\nconst intialState ={ loggedin:true};\n\nconst reducer = (state =intialState,action) =>{\n\t switch(action.type){\n\t \t  case \"Login\":\n\t \t \n\t \t  state={...state,isLoggedIn :true}\n\t \t        \n\t \t  break;\n\t \t  case  \"Logout\":\n          break;\n\n\t }\n\t return state;\n\t\n}\n\n\nconst store = createStore(reducer);\n store.subscribe(()=> {\n\n})\n store.dispatch({ type : \"Login\", isLoggedIn : true });\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}